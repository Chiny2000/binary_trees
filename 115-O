#include <stdio.h>
#include <stdlib.h>

// Define the structure for a BST node
typedef struct TreeNode {
    int key;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

// Function to create a new BST node
TreeNode* createNode(int key) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (newNode != NULL) {
        newNode->key = key;
        newNode->left = newNode->right = NULL;
    }
    return newNode;
}

// Function to insert a value into the BST
TreeNode* insert(TreeNode* root, int key) {
    // Base case: If the tree is empty, create a new node
    if (root == NULL)
        return createNode(key);

    // Recursive cases: Insert in the left or right subtree
    if (key < root->key)
        root->left = insert(root->left, key);
    else if (key > root->key)
        root->right = insert(root->right, key);

    // Return the updated root
    return root;
}

// Function to find the minimum value node in a BST
TreeNode* minValueNode(TreeNode* node) {
    TreeNode* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

// Function to delete a node with a given key from the BST
TreeNode* deleteNode(TreeNode* root, int key) {
    // Base case: If the tree is empty, return NULL
    if (root == NULL)
        return root;

    // Recursive cases: Traverse the tree to find the node to be deleted
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        // Node with only one child or no child
        if (root->left == NULL) {
            TreeNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            TreeNode* temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        TreeNode* temp = minValueNode(root->right);

        // Copy the inorder successor's key to this node
        root->key = temp->key;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->key);
    }

    // Return the updated root
    return root;
}

// Function to search for a key in the BST
TreeNode* search(TreeNode* root, int key) {
    // Base cases: Root is null or the key is present at root
    if (root == NULL || root->key == key)
        return root;

    // Key is greater than root's key, search in the right subtree
    if (root->key < key)
        return search(root->right, key);

    // Key is smaller than root's key, search in the left subtree
    return search(root->left, key);
}

// Function to print the inorder traversal of the BST
void inorderTraversal(TreeNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->key);
        inorderTraversal(root->right);
    }
}

int main() {
    TreeNode* root = NULL;

    // Insert values into the BST
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // Print the inorder traversal of the BST
    printf("Inorder traversal: ");
    inorderTraversal(root);
    printf("\n");

    // Search for a node in the BST
    int keyToSearch = 40;
    TreeNode* searchResult = search(root, keyToSearch);
    if (searchResult != NULL)
        printf("Node with key %d found in the BST.\n", keyToSearch);
    else
        printf("Node with key %d not found in the BST.\n", keyToSearch);

    // Delete a node from the BST
    int keyToDelete = 30;
    root = deleteNode(root, keyToDelete);
    printf("Inorder traversal after deleting node with key %d: ", keyToDelete);
    inorderTraversal(root);
    printf("\n");

    // Free the memory allocated for the BST nodes
    // (Note: In a real-world scenario, you would want to free all nodes before program termination)
    free(root);

    return 0;
}
